name: Build & Deploy Next.js (standalone) to Azure App Service

on:
  push:
    branches: [ master, main ]
  workflow_dispatch: {}

concurrency:
  group: mydea-frontend-prod
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Build (standalone)
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Assert standalone output exists
        run: |
          ls -al .next || true
          if [ ! -d ".next/standalone" ]; then
            echo "❌ .next/standalone not found"
            exit 1
          fi
          test -f .next/standalone/server.js
          test -d .next/static

      - name: Package standalone output
        run: |
          set -e
          rm -rf package && mkdir -p package
          # 1) standalone 산출물 복사 (server.js, node_modules 등)
          cp -r .next/standalone/* package/
          # 2) Next 정적 리소스 및 필수 빌드 메타 복사
          mkdir -p package/.next/static
          cp -r .next/static/* package/.next/static/
          # ✅ 필수: BUILD_ID
          mkdir -p package/.next
          cp .next/BUILD_ID package/.next/BUILD_ID
          # (권장) 추가 메타도 함께: 문제 예방용
          for f in images-manifest.json prerender-manifest.json routes-manifest.json; do
            [ -f ".next/$f" ] && cp ".next/$f" "package/.next/$f"
          done
          # 3) public(있다면)
          if [ -d public ]; then
            mkdir -p package/public && cp -r public/* package/public/
          fi
          echo "== packaged root =="
          ls -al package | sed -n '1,120p'
          # 검증
          test -f package/server.js
          test -f package/.next/BUILD_ID
          test -d package/.next/static
          test -d package/node_modules

      - name: Create release.zip
        run: |
          (cd package && zip -r ../release.zip .)
          echo "== zip top =="
          unzip -l release.zip | head -20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: ./release   # zip을 ./release/release.zip 으로 다운로드

      - name: Verify artifact
        run: |
          echo "== check downloaded zip =="
          ls -al ./release
          unzip -l ./release/release.zip | head -20

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DCC3CFFF754D40EC91632123281E68C9 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_CF2F17DEA22049598F871624F2C13252 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_40ED88AB27D24EB795F402493C787FE4 }}

      - name: Deploy (Run-From-Package)
        uses: azure/webapps-deploy@v3
        with:
          app-name: mydea-frontend
          package: ./release/release.zip   # ← zip 경로 확실히 지정
          type: zip
