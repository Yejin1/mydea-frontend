name: Build & Deploy Next.js (standalone) to Azure App Service

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: mydea-frontend-prod
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Build (standalone)
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}

      - name: Assert standalone output exists
        run: |
          ls -al .next
          if [ ! -d ".next/standalone" ]; then
            echo "❌ .next/standalone not found"
            exit 1
          fi
          test -f .next/standalone/server.js

      - name: Package standalone output
        run: |
          set -e
          rm -rf package && mkdir -p package

          # 1) standalone 산출물 복사
          cp -r .next/standalone/* package/

          # 2) 정적 파일(static) + BUILD_ID
          mkdir -p package/.next/static
          cp -r .next/static/* package/.next/static/
          mkdir -p package/.next
          cp .next/BUILD_ID package/.next/BUILD_ID

          # 3) 서버 런타임이 참조하는 server/ 트리 추가
          if [ -d ".next/server" ]; then
            mkdir -p package/.next/server
            cp -r .next/server/* package/.next/server/
          fi

          # 4) 루트 manifest 몇 개 복사
          for f in \
            app-build-manifest.json \
            app-path-routes-manifest.json \
            build-manifest.json \
            images-manifest.json \
            prerender-manifest.json \
            react-loadable-manifest.json \
            required-server-files.json \
            routes-manifest.json \
            next-server.js.nft.json \
            next-minimal-server.js.nft.json
          do
            [ -f ".next/$f" ] && cp ".next/$f" "package/.next/$f"
          done

          # 5) public 폴더 추가
          if [ -d public ]; then
            mkdir -p package/public && cp -r public/* package/public/
          fi

          echo "== packaged root =="
          ls -al package | sed -n '1,120p'

          # 검증
          test -f package/server.js
          test -f package/.next/BUILD_ID
          test -d package/.next/static
          test -d package/node_modules
          test -d package/.next/server

      - name: Create release.zip
        run: |
          cd package && zip -r ../release.zip . && cd ..
          echo "== zip top =="
          unzip -l release.zip | head -20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: ./release   # ./release/release.zip 으로 다운로드됨

      - name: Verify artifact
        run: |
          echo "== check downloaded zip =="
          ls -al ./release
          unzip -l ./release/release.zip | head -20

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DCC3CFFF754D40EC91632123281E68C9 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_CF2F17DEA22049598F871624F2C13252 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_40ED88AB27D24EB795F402493C787FE4 }}

      - name: Deploy (Run-From-Package)
        uses: azure/webapps-deploy@v3
        with:
          app-name: mydea-frontend
          package: ./release/release.zip
          type: zip

